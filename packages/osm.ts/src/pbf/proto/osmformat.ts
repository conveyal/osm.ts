// code generated by @mapbox/pbf v4.0.1 and types merged in by hand
import type Pbf from "pbf"

export type OsmPbfHeaderBBox = {
	left: number
	right: number
	top: number
	bottom: number
}

export type OsmPbfHeaderBlock = {
	bbox?: OsmPbfHeaderBBox
	required_features: string[]
	optional_features: string[]
	writingprogram?: string
	source?: string
	osmosis_replication_timestamp?: number
	osmosis_replication_sequence_number?: number
	osmosis_replication_base_url?: string
}

export interface OsmPbfBlockSettings {
	granularity?: number
	lat_offset?: number
	lon_offset?: number
	date_granularity?: number
}

export interface OsmPbfPrimitiveBlock extends OsmPbfBlockSettings {
	stringtable: string[]
	primitivegroup: OsmPbfPrimitiveGroup[]
}

export type OsmPbfPrimitiveGroup = {
	nodes: OsmPbfNode[]
	dense?: OsmPbfDenseNodes
	ways: OsmPbfWay[]
	relations: OsmPbfRelation[]
}

export type OsmPbfStringTable = {
	s: Uint8Array[]
}

export interface OsmPbfInfo {
	version?: number
	timestamp?: number
	changeset?: number
	uid?: number
	user_sid?: number
	visible?: boolean
}

export type OsmPbfDenseInfo = {
	version: number[]
	timestamp: number[]
	changeset: number[]
	uid: number[]
	user_sid: number[]
	visible: boolean[]
}

export interface OsmPbfPrimitive {
	id: number
	keys: number[]
	vals: number[]
	info?: OsmPbfInfo
}

export interface OsmPbfNode extends OsmPbfPrimitive {
	lat: number
	lon: number
}

export type OsmPbfDenseNodes = {
	id: number[]
	denseinfo?: OsmPbfDenseInfo
	lat: number[]
	lon: number[]
	keys_vals: number[]
}

export interface OsmPbfWay extends OsmPbfPrimitive {
	refs: number[]
}

export interface OsmPbfRelation extends OsmPbfPrimitive {
	roles_sid: number[]
	memids: number[]
	types: number[]
}

export function readHeaderBlock(pbf: Pbf, end?: number): OsmPbfHeaderBlock {
	return pbf.readFields(
		readHeaderBlockField,
		{
			required_features: [],
			optional_features: [],
		},
		end,
	)
}
function readHeaderBlockField(tag: number, obj: OsmPbfHeaderBlock, pbf: Pbf) {
	if (tag === 1) obj.bbox = readHeaderBBox(pbf, pbf.readVarint() + pbf.pos)
	else if (tag === 4) obj.required_features.push(pbf.readString())
	else if (tag === 5) obj.optional_features.push(pbf.readString())
	else if (tag === 16) obj.writingprogram = pbf.readString()
	else if (tag === 17) obj.source = pbf.readString()
	else if (tag === 32) obj.osmosis_replication_timestamp = pbf.readVarint(true)
	else if (tag === 33) {
		obj.osmosis_replication_sequence_number = pbf.readVarint(true)
	} else if (tag === 34) obj.osmosis_replication_base_url = pbf.readString()
}
export function writeHeaderBlock(obj: OsmPbfHeaderBlock, pbf: Pbf) {
	if (obj.bbox) pbf.writeMessage(1, writeHeaderBBox, obj.bbox)
	if (obj.required_features) {
		for (const item of obj.required_features) pbf.writeStringField(4, item)
	}
	if (obj.optional_features) {
		for (const item of obj.optional_features) pbf.writeStringField(5, item)
	}
	if (obj.writingprogram) pbf.writeStringField(16, obj.writingprogram)
	if (obj.source) pbf.writeStringField(17, obj.source)
	if (obj.osmosis_replication_timestamp) {
		pbf.writeVarintField(32, obj.osmosis_replication_timestamp)
	}
	if (obj.osmosis_replication_sequence_number) {
		pbf.writeVarintField(33, obj.osmosis_replication_sequence_number)
	}
	if (obj.osmosis_replication_base_url) {
		pbf.writeStringField(34, obj.osmosis_replication_base_url)
	}
}

function readHeaderBBox(pbf: Pbf, end?: number): OsmPbfHeaderBBox {
	return pbf.readFields(
		readHeaderBBoxField,
		{ left: 0, right: 0, top: 0, bottom: 0 },
		end,
	)
}
/**
 * Read values and convert from nanodegrees to degrees.
 */
function readHeaderBBoxField(tag: number, obj: OsmPbfHeaderBBox, pbf: Pbf) {
	if (tag === 1) obj.left = pbf.readSVarint() / 1e9
	else if (tag === 2) obj.right = pbf.readSVarint() / 1e9
	else if (tag === 3) obj.top = pbf.readSVarint() / 1e9
	else if (tag === 4) obj.bottom = pbf.readSVarint() / 1e9
}
function writeHeaderBBox(obj: OsmPbfHeaderBBox, pbf: Pbf) {
	if (obj.left) pbf.writeSVarintField(1, obj.left * 1e9)
	if (obj.right) pbf.writeSVarintField(2, obj.right * 1e9)
	if (obj.top) pbf.writeSVarintField(3, obj.top * 1e9)
	if (obj.bottom) pbf.writeSVarintField(4, obj.bottom * 1e9)
}

export function readPrimitiveBlock(
	pbf: Pbf,
	end?: number,
): OsmPbfPrimitiveBlock {
	return pbf.readFields(
		readPrimitiveBlockField,
		{
			stringtable: [],
			primitivegroup: [],
		},
		end,
	)
}

const textDecoder = new TextDecoder()
function readPrimitiveBlockField(
	tag: number,
	obj: OsmPbfPrimitiveBlock,
	pbf: Pbf,
) {
	if (tag === 1) {
		obj.stringtable = readStringTable(pbf, pbf.readVarint() + pbf.pos).s.map(
			(s) => textDecoder.decode(s),
		)
	} else if (tag === 2) {
		obj.primitivegroup.push(readPrimitiveGroup(pbf, pbf.readVarint() + pbf.pos))
	} else if (tag === 17) {
		obj.granularity = pbf.readVarint(true)
		obj.granularity = !obj.granularity ? 1e7 : 1e9 / obj.granularity
		console.error("readGranularity", obj.granularity)
	} else if (tag === 19) obj.lat_offset = pbf.readVarint(true) * 1e-9
	else if (tag === 20) obj.lon_offset = pbf.readVarint(true) * 1e-9
	else if (tag === 18) obj.date_granularity = pbf.readVarint(true) ?? 1000
}

const textEncoder = new TextEncoder()
export function writePrimitiveBlock(obj: OsmPbfPrimitiveBlock, pbf: Pbf) {
	if (obj.stringtable)
		pbf.writeMessage(1, writeStringTable, {
			s: obj.stringtable.map((s) => textEncoder.encode(s)),
		})
	if (obj.primitivegroup) {
		for (const item of obj.primitivegroup) {
			pbf.writeMessage(2, writePrimitiveGroup, item)
		}
	}
	if (obj.granularity != null && obj.granularity !== 1e7) {
		console.error("writeGranularity", obj.granularity)
		pbf.writeVarintField(17, 1e9 / obj.granularity)
	}
	if (obj.lat_offset) pbf.writeVarintField(19, obj.lat_offset / 1e-9)
	if (obj.lon_offset) pbf.writeVarintField(20, obj.lon_offset / 1e-9)
	if (obj.date_granularity != null && obj.date_granularity !== 1000) {
		pbf.writeVarintField(18, obj.date_granularity)
	}
}

function readPrimitiveGroup(pbf: Pbf, end?: number): OsmPbfPrimitiveGroup {
	return pbf.readFields(
		readPrimitiveGroupField,
		{ nodes: [], ways: [], relations: [] },
		end,
	)
}
function readPrimitiveGroupField(
	tag: number,
	obj: OsmPbfPrimitiveGroup,
	pbf: Pbf,
) {
	if (tag === 1) obj.nodes.push(readNode(pbf, pbf.readVarint() + pbf.pos))
	else if (tag === 2) {
		obj.dense = readDenseNodes(pbf, pbf.readVarint() + pbf.pos)
	} else if (tag === 3) obj.ways.push(readWay(pbf, pbf.readVarint() + pbf.pos))
	else if (tag === 4) {
		obj.relations.push(readRelation(pbf, pbf.readVarint() + pbf.pos))
	}
}
function writePrimitiveGroup(obj: OsmPbfPrimitiveGroup, pbf: Pbf) {
	if (obj.nodes) {
		for (const item of obj.nodes) pbf.writeMessage(1, writeNode, item)
	}
	if (obj.dense) pbf.writeMessage(2, writeDenseNodes, obj.dense)
	if (obj.ways) {
		for (const item of obj.ways) pbf.writeMessage(3, writeWay, item)
	}
	if (obj.relations) {
		for (const item of obj.relations) pbf.writeMessage(4, writeRelation, item)
	}
}

function readStringTable(pbf: Pbf, end?: number): OsmPbfStringTable {
	return pbf.readFields(readStringTableField, { s: [] }, end)
}
function readStringTableField(tag: number, obj: OsmPbfStringTable, pbf: Pbf) {
	if (tag === 1) obj.s.push(pbf.readBytes())
}
function writeStringTable(obj: OsmPbfStringTable, pbf: Pbf) {
	if (obj.s) {
		for (const item of obj.s) pbf.writeBytesField(1, item)
	}
}

function readInfo(pbf: Pbf, end?: number): OsmPbfInfo {
	return pbf.readFields(readInfoField, {}, end)
}
function readInfoField(tag: number, obj: OsmPbfInfo, pbf: Pbf) {
	if (tag === 1) obj.version = pbf.readVarint(true)
	else if (tag === 2) obj.timestamp = pbf.readVarint(true)
	else if (tag === 3) obj.changeset = pbf.readVarint(true)
	else if (tag === 4) obj.uid = pbf.readVarint(true)
	else if (tag === 5) obj.user_sid = pbf.readVarint()
	else if (tag === 6) obj.visible = pbf.readBoolean()
}
function writeInfo(obj: OsmPbfInfo, pbf: Pbf) {
	if (obj.version != null && obj.version !== -1) {
		pbf.writeVarintField(1, obj.version)
	}
	if (obj.timestamp) pbf.writeVarintField(2, obj.timestamp)
	if (obj.changeset) pbf.writeVarintField(3, obj.changeset)
	if (obj.uid) pbf.writeVarintField(4, obj.uid)
	if (obj.user_sid) pbf.writeVarintField(5, obj.user_sid)
	if (obj.visible) pbf.writeBooleanField(6, obj.visible)
}

function readDenseInfo(pbf: Pbf, end?: number): OsmPbfDenseInfo {
	return pbf.readFields(
		readDenseInfoField,
		{
			version: [],
			timestamp: [],
			changeset: [],
			uid: [],
			user_sid: [],
			visible: [],
		},
		end,
	)
}
function readDenseInfoField(tag: number, obj: OsmPbfDenseInfo, pbf: Pbf) {
	if (tag === 1) pbf.readPackedVarint(obj.version, true)
	else if (tag === 2) pbf.readPackedSVarint(obj.timestamp)
	else if (tag === 3) pbf.readPackedSVarint(obj.changeset)
	else if (tag === 4) pbf.readPackedSVarint(obj.uid)
	else if (tag === 5) pbf.readPackedSVarint(obj.user_sid)
	else if (tag === 6) pbf.readPackedBoolean(obj.visible)
}
function writeDenseInfo(obj: OsmPbfDenseInfo, pbf: Pbf) {
	if (obj.version) pbf.writePackedVarint(1, obj.version)
	if (obj.timestamp) pbf.writePackedSVarint(2, obj.timestamp)
	if (obj.changeset) pbf.writePackedSVarint(3, obj.changeset)
	if (obj.uid) pbf.writePackedSVarint(4, obj.uid)
	if (obj.user_sid) pbf.writePackedSVarint(5, obj.user_sid)
	if (obj.visible) pbf.writePackedBoolean(6, obj.visible)
}

function readNode(pbf: Pbf, end?: number): OsmPbfNode {
	return pbf.readFields(
		readNodeField,
		{ id: 0, keys: [], vals: [], lat: 0, lon: 0 },
		end,
	)
}
function readNodeField(tag: number, obj: OsmPbfNode, pbf: Pbf) {
	if (tag === 1) obj.id = pbf.readSVarint()
	else if (tag === 2) pbf.readPackedVarint(obj.keys)
	else if (tag === 3) pbf.readPackedVarint(obj.vals)
	else if (tag === 4) obj.info = readInfo(pbf, pbf.readVarint() + pbf.pos)
	else if (tag === 8) obj.lat = pbf.readSVarint()
	else if (tag === 9) obj.lon = pbf.readSVarint()
}
function writeNode(obj: OsmPbfNode, pbf: Pbf) {
	if (obj.id) pbf.writeSVarintField(1, obj.id)
	if (obj.keys) pbf.writePackedVarint(2, obj.keys)
	if (obj.vals) pbf.writePackedVarint(3, obj.vals)
	if (obj.info) pbf.writeMessage(4, writeInfo, obj.info)
	if (obj.lat) pbf.writeSVarintField(8, obj.lat)
	if (obj.lon) pbf.writeSVarintField(9, obj.lon)
}

function readDenseNodes(pbf: Pbf, end?: number): OsmPbfDenseNodes {
	return pbf.readFields(
		readDenseNodesField,
		{ id: [], lat: [], lon: [], keys_vals: [] },
		end,
	)
}
function readDenseNodesField(tag: number, obj: OsmPbfDenseNodes, pbf: Pbf) {
	if (tag === 1) pbf.readPackedSVarint(obj.id)
	else if (tag === 5) {
		obj.denseinfo = readDenseInfo(pbf, pbf.readVarint() + pbf.pos)
	} else if (tag === 8) pbf.readPackedSVarint(obj.lat)
	else if (tag === 9) pbf.readPackedSVarint(obj.lon)
	else if (tag === 10) pbf.readPackedVarint(obj.keys_vals, true)
}
function writeDenseNodes(obj: OsmPbfDenseNodes, pbf: Pbf) {
	if (obj.id) pbf.writePackedSVarint(1, obj.id)
	if (obj.denseinfo) pbf.writeMessage(5, writeDenseInfo, obj.denseinfo)
	if (obj.lat) pbf.writePackedSVarint(8, obj.lat)
	if (obj.lon) pbf.writePackedSVarint(9, obj.lon)
	if (obj.keys_vals) pbf.writePackedVarint(10, obj.keys_vals)
}

function readWay(pbf: Pbf, end?: number): OsmPbfWay {
	return pbf.readFields(
		readWayField,
		{ id: 0, keys: [], vals: [], refs: [], lat: [], lon: [] },
		end,
	)
}
function readWayField(tag: number, obj: OsmPbfWay, pbf: Pbf) {
	if (tag === 1) obj.id = pbf.readVarint(true)
	else if (tag === 2) pbf.readPackedVarint(obj.keys)
	else if (tag === 3) pbf.readPackedVarint(obj.vals)
	else if (tag === 4) obj.info = readInfo(pbf, pbf.readVarint() + pbf.pos)
	else if (tag === 8) pbf.readPackedSVarint(obj.refs)
}
function writeWay(obj: OsmPbfWay, pbf: Pbf) {
	if (obj.id) pbf.writeVarintField(1, obj.id)
	if (obj.keys) pbf.writePackedVarint(2, obj.keys)
	if (obj.vals) pbf.writePackedVarint(3, obj.vals)
	if (obj.info) pbf.writeMessage(4, writeInfo, obj.info)
	if (obj.refs) pbf.writePackedSVarint(8, obj.refs)
}

function readRelation(pbf: Pbf, end?: number): OsmPbfRelation {
	return pbf.readFields(
		readRelationField,
		{
			id: 0,
			keys: [],
			vals: [],
			roles_sid: [],
			memids: [],
			types: [],
		},
		end,
	)
}
function readRelationField(tag: number, obj: OsmPbfRelation, pbf: Pbf) {
	if (tag === 1) obj.id = pbf.readVarint(true)
	else if (tag === 2) pbf.readPackedVarint(obj.keys)
	else if (tag === 3) pbf.readPackedVarint(obj.vals)
	else if (tag === 4) obj.info = readInfo(pbf, pbf.readVarint() + pbf.pos)
	else if (tag === 8) pbf.readPackedVarint(obj.roles_sid, true)
	else if (tag === 9) pbf.readPackedSVarint(obj.memids)
	else if (tag === 10) pbf.readPackedVarint(obj.types)
}
function writeRelation(obj: OsmPbfRelation, pbf: Pbf) {
	if (obj.id) pbf.writeVarintField(1, obj.id)
	if (obj.keys) pbf.writePackedVarint(2, obj.keys)
	if (obj.vals) pbf.writePackedVarint(3, obj.vals)
	if (obj.info) pbf.writeMessage(4, writeInfo, obj.info)
	if (obj.roles_sid) pbf.writePackedVarint(8, obj.roles_sid)
	if (obj.memids) pbf.writePackedSVarint(9, obj.memids)
	if (obj.types) pbf.writePackedVarint(10, obj.types)
}
